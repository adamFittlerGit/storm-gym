{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 164, "column": 0}, "map": {"version":3,"sources":["file:///home/adam/storm-gym/next-app/app/api/workouts/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { sql } from '@vercel/postgres';\n\nexport async function GET() {\n  try {\n    const { rows } = await sql`\n      SELECT * FROM workouts \n      ORDER BY created_at DESC\n    `;\n    return NextResponse.json(rows);\n  } catch (error) {\n    return NextResponse.json({ error: 'Failed to fetch workouts' }, { status: 500 });\n  }\n}\n\nexport async function POST(request: Request) {\n  try {\n    const { name, description } = await request.json();\n    \n    // Note: You'll need to implement proper user authentication\n    // For now, using a placeholder user_id\n    const user_id = 'placeholder-user-id';\n    \n    const { rows } = await sql`\n      INSERT INTO workouts (user_id, name, description)\n      VALUES (${user_id}, ${name}, ${description})\n      RETURNING *\n    `;\n    \n    return NextResponse.json(rows[0]);\n  } catch (error) {\n    return NextResponse.json({ error: 'Failed to create workout' }, { status: 500 });\n  }\n} "],"names":[],"mappings":";;;;AAAA;AACA;AAAA;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,mLAAA,CAAA,MAAG,CAAC;;;IAG3B,CAAC;QACD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA2B,GAAG;YAAE,QAAQ;QAAI;IAChF;AACF;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEhD,4DAA4D;QAC5D,uCAAuC;QACvC,MAAM,UAAU;QAEhB,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,mLAAA,CAAA,MAAG,CAAC;;cAEjB,EAAE,QAAQ,EAAE,EAAE,KAAK,EAAE,EAAE,YAAY;;IAE7C,CAAC;QAED,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;IAClC,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA2B,GAAG;YAAE,QAAQ;QAAI;IAChF;AACF","debugId":null}}]
}